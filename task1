// VERILOG CODE AND TESTBENCH  FOR AND GATE //

module and_gate (
input A,
input B,
output Y
);
assign Y = A&B;
endmodule

////////////// TESTBENCH /////////////////
module and_gate_tb;
reg A;
reg B;
wire Y;
// Instantiate the AND gate
and_gate_tb dut (
.A(A),
.B(B),
.Y(Y)
);
initial begin
// Display the header for the waveform output

$dumpfile("and_gate_tb.vcd");
        $dumpvars(0, and_gate_tb);
// Apply test vectors
A = 0; B = 0; #10;
A = 0; B = 1; #10;
A = 1; B = 0; #10;
A = 1; B = 1; #10;
$finish;
end
endmodule
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// VERILOG CODE AND TESTBENCH FOR OR GATE //
module or_gate (
    input wire a,
    input wire b,
    output reg y
);

    always @(*) begin
        y = a | b;  // OR operation
    end

endmodule

////////////// TESTBENCH /////////////////
module or_gate_tb;

    // Inputs
    reg a;
    reg b;

    // Output
    wire y;

    // Instantiate the OR gate module
    or_gate dut (
        .a(a),
        .b(b),
        .y(y)
    );

    // Stimulus generation
    initial begin
        $dumpfile("or_gate_tb.vcd");
        $dumpvars(0, or_gate_tb);

        // Test case 1: a=0, b=0
        a = 0;
        b = 0;
        #10;  // Wait for 10 time units
        // Expected y = 0
        
        // Test case 2: a=0, b=1
        a = 0;
        b = 1;
        #10;  // Wait for 10 time units
        // Expected y = 1
        
        // Test case 3: a=1, b=0
        a = 1;
        b = 0;
        #10;  // Wait for 10 time units
        // Expected y = 1
        
        // Test case 4: a=1, b=1
        a = 1;
        b = 1;
        #10;  // Wait for 10 time units
        // Expected y = 1

        $finish;  // End the simulation
    end

endmodule
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// VERILOG CODE AND TESTBENCH FOR NOR GATE //
module nor_gate (
    input wire a,
    input wire b,
    output reg y
);

    always @(*) begin
        y = ~(a | b);  // NOR operation
    end

endmodule

////////////// TESTBENCH /////////////////
module nor_gate_tb;

    // Inputs
    reg a;
    reg b;

    // Output
    wire y;

    // Instantiate the NOR gate module
    nor_gate dut (
        .a(a),
        .b(b),
        .y(y)
    );

    // Stimulus generation
    initial begin
        $dumpfile("nor_gate_tb.vcd");
        $dumpvars(0, nor_gate_tb);

        // Test case 1: a=0, b=0
        a = 0;
        b = 0;
        #10;  // Wait for 10 time units
        // Expected y = 1 (since NOR(0, 0) = 1)
        
        // Test case 2: a=0, b=1
        a = 0;
        b = 1;
        #10;  // Wait for 10 time units
        // Expected y = 0 (since NOR(0, 1) = 0)
        
        // Test case 3: a=1, b=0
        a = 1;
        b = 0;
        #10;  // Wait for 10 time units
        // Expected y = 0 (since NOR(1, 0) = 0)
        
        // Test case 4: a=1, b=1
        a = 1;
        b = 1;
        #10;  // Wait for 10 time units
        // Expected y = 0 (since NOR(1, 1) = 0)

        $finish;  // End the simulation
    end

endmodule
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// VERILOG CODE AND TESTBENCH FOR NAND GATE //
module nand_gate (
    input wire a,
    input wire b,
    output reg y
);

    always @(*) begin
        y = ~(a & b);  // NAND operation
    end

endmodule

////////////// TESTBENCH /////////////////
module nand_gate_tb;

    // Inputs
    reg a;
    reg b;

    // Output
    wire y;

    // Instantiate the NAND gate module
    nand_gate dut (
        .a(a),
        .b(b),
        .y(y)
    );

    // Stimulus generation
    initial begin
        $dumpfile("nand_gate_tb.vcd");
        $dumpvars(0, nand_gate_tb);

        // Test case 1: a=0, b=0
        a = 0;
        b = 0;
        #10;  // Wait for 10 time units
        // Expected y = 1 (since NAND(0, 0) = 1)
        
        // Test case 2: a=0, b=1
        a = 0;
        b = 1;
        #10;  // Wait for 10 time units
        // Expected y = 1 (since NAND(0, 1) = 1)
        
        // Test case 3: a=1, b=0
        a = 1;
        b = 0;
        #10;  // Wait for 10 time units
        // Expected y = 1 (since NAND(1, 0) = 1)
        
        // Test case 4: a=1, b=1
        a = 1;
        b = 1;
        #10;  // Wait for 10 time units
        // Expected y = 0 (since NAND(1, 1) = 0)

        $finish;  // End the simulation
    end

endmodule
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// VERILOG CODE AND TESTBENCH FOR XOR GATE //
module xor_gate (
    input wire a,
    input wire b,
    output reg y
);

    always @(*) begin
        y = a ^ b;  // XOR operation
    end

endmodule

////////////// TESTBENCH /////////////////
module xor_gate_tb;

    // Inputs
    reg a;
    reg b;

    // Output
    wire y;

    // Instantiate the XOR gate module
    xor_gate dut (
        .a(a),
        .b(b),
        .y(y)
    );

    // Stimulus generation
    initial begin
        $dumpfile("xor_gate_tb.vcd");
        $dumpvars(0, xor_gate_tb);

        // Test case 1: a=0, b=0
        a = 0;
        b = 0;
        #10;  // Wait for 10 time units
        // Expected y = 0 (since XOR(0, 0) = 0)
        
        // Test case 2: a=0, b=1
        a = 0;
        b = 1;
        #10;  // Wait for 10 time units
        // Expected y = 1 (since XOR(0, 1) = 1)
        
        // Test case 3: a=1, b=0
        a = 1;
        b = 0;
        #10;  // Wait for 10 time units
        // Expected y = 1 (since XOR(1, 0) = 1)
        
        // Test case 4: a=1, b=1
        a = 1;
        b = 1;
        #10;  // Wait for 10 time units
        // Expected y = 0 (since XOR(1, 1) = 0)

        $finish;  // End the simulation
    end

endmodule
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// VERILOG CODE AND TESTBENCH FOR NOT GATE //
module not_gate (
    input wire A,
    output reg Y
);

    always @ (A)
        Y = ~A;

endmodule
////////////// TESTBENCH /////////////////

module testbench_not_gate;

    // Inputs
    reg A;

    // Outputs
    wire Y;

    // Instantiate the NOT gate
    not_gate uut (
        .A(A),
        .Y(Y)
    );

    // Stimulus generation
    initial begin
        $dumpfile("not_gate.vcd");
        $dumpvars(0, testbench_not_gate);

        // Test case 1: A = 0
        A = 0;
        #10;  // Wait for 10 time units
        // Expected Y = 1
        if (Y !== 1) $display("Test case 1 failed: Y = %b (expected 1)", Y);
        else $display("Test case 1 passed");

        // Test case 2: A = 1
        A = 1;
        #10;  // Wait for 10 time units
        // Expected Y = 0
        if (Y !== 0) $display("Test case 2 failed: Y = %b (expected 0)", Y);
        else $display("Test case 2 passed");

        $finish; // End simulation
    end

endmodule
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// VERILOG CODE AND TESTBENCH FOR HALF ADDER //
module half_adder (
input a,
input b,
output sum,
output carry
);
assign sum = a ^ b;
assign carry = a & b;
endmodule

////////////// TESTBENCH /////////////////
module half_adder_tb;
reg a;
reg b;
wire sum;
wire carry;
// Instantiate the half adder
half_adder uut (
.a(a),
.b(b),
.sum(sum),
.carry(carry)
);
initial begin
// Display the header for the waveform 
output
$display("a b | sum carry");
$display("----|----------");
// Apply test vectors
a = 0; b = 0; #10;
$display("%b %b | %b %b", a, b, sum, 
carry);
a = 0; b = 1; #10;
$display("%b %b | %b %b", a, b, sum, 
carry);
a = 1; b = 0; #10;
$display("%b %b | %b %b", a, b, sum, 
carry);
a = 1; b = 1; #10;
$display("%b %b | %b %b", a, b, sum, 
carry);
$finish;
end
endmodule
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// VERILOG CODE AND TESTBENCH FOR FULL ADDER //
module myfulladder (
input A,
input B,
input Cin,
output Sum,
output Cout
);
assign Sum = A ^ B ^ Cin;
assign Cout = (A & B) | (Cin & (A ^ B));
endmodule


///////// --- TESTBENCH  ---  //////////


module test_myfulladder;
reg A;
reg B;
reg Cin;
wire Sum;
wire Cout;
// Instantiate the full adder
myfulladder uut (
.A(A),
.B(B),
.Cin(Cin),
.Sum(Sum),
.Cout(Cout)
);
initial begin
// Display the header for the waveform 
output
$display("A B Cin | Sum Cout");
$display("--------|----------");
// Apply test vectors
A = 0; B = 0; Cin = 0; #10;
$display("%b %b %b | %b %b", A, B, 
Cin, Sum, Cout);
A = 0; B = 0; Cin = 1; #10;
$display("%b %b %b | %b %b", A, B, 
Cin, Sum, Cout);
A = 0; B = 1; Cin = 0; #10;
$display("%b %b %b | %b %b", A, B, 
Cin, Sum, Cout);
A = 0; B = 1; Cin = 1; #10;
$display("%b %b %b | %b %b", A, B, 
Cin, Sum, Cout);
A = 1; B = 0; Cin = 0; #10;
$display("%b %b %b | %b %b", A, B, 
Cin, Sum, Cout);
A = 1; B = 0; Cin = 1; #10;
$display("%b %b %b | %b %b", A, B, 
Cin, Sum, Cout);
A = 1; B = 1; Cin = 0; #10;
$display("%b %b %b | %b %b", A, B, 
Cin, Sum, Cout);
A = 1; B = 1; Cin = 1; #10;
$display("%b %b %b | %b %b", A, B, 
Cin, Sum, Cout);
$finish;
end
endmodule
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// VERILOG CODE AND TESTBENCH FOR 2 TO 1 MULTIPLEXER //

module my2to1mux (
    input A,
    input B,
    input Sel,
    output Y
);
    assign Y = (Sel) ? B : A;
endmodule

//////////////////  TESTBENCH  ///////////////////////

module test_my2to1mux;
    reg A;
    reg B;
    reg Sel;
    wire Y;

    // Instantiate the 2-to-1 multiplexer
    my2to1mux uut (
        .A(A),
        .B(B),
        .Sel(Sel),
        .Y(Y)
    );

    initial begin
        // Display the header for the waveform output
        $display("A B Sel | Y");
        $display("--------|--");

        // Apply test vectors
        A = 0; B = 0; Sel = 0; #10;
        $display("%b %b  %b  | %b", A, B, Sel, Y);

        A = 0; B = 0; Sel = 1; #10;
        $display("%b %b  %b  | %b", A, B, Sel, Y);

        A = 0; B = 1; Sel = 0; #10;
        $display("%b %b  %b  | %b", A, B, Sel, Y);

        A = 0; B = 1; Sel = 1; #10;
        $display("%b %b  %b  | %b", A, B, Sel, Y);

        A = 1; B = 0; Sel = 0; #10;
        $display("%b %b  %b  | %b", A, B, Sel, Y);

        A = 1; B = 0; Sel = 1; #10;
        $display("%b %b  %b  | %b", A, B, Sel, Y);

        A = 1; B = 1; Sel = 0; #10;
        $display("%b %b  %b  | %b", A, B, Sel, Y);

        A = 1; B = 1; Sel = 1; #10;
        $display("%b %b  %b  | %b", A, B, Sel, Y);

        $finish;
    end
endmodule

